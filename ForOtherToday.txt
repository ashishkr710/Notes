To send an email using Nodemailer in the backend, you’ll need to set up a Node.js server and configure Nodemailer. Here’s how you can do it step by step:


---

1. Backend Setup

Install Dependencies

Run the following commands to initialize the backend:

mkdir backend
cd backend
npm init -y
npm install express body-parser nodemailer cors dotenv


---

2. Directory Structure

backend/
├── server.js
├── .env
└── package.json


---

3. Create the Backend Logic

Add Environment Variables

Create a .env file in the backend folder to store sensitive information:

EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_email_password

Set Up the Server

Create a server.js file:

const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Nodemailer Configuration
const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: process.env.EMAIL_PORT,
  secure: false,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Send Email Endpoint
app.post('/send-email', async (req, res) => {
  const { email, cart, totalAmount, deliveryDate } = req.body;

  const cartDetails = cart
    .map((item) => `<li>${item.name} (x${item.quantity}) - $${item.price * item.quantity}</li>`)
    .join('');

  const mailOptions = {
    from: `"Ecommerce Store" <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'Order Confirmation',
    html: `
      <h1>Order Confirmation</h1>
      <p>Thank you for your order! Here are your order details:</p>
      <ul>${cartDetails}</ul>
      <p><b>Total Amount:</b> $${totalAmount}</p>
      <p><b>Estimated Delivery Date:</b> ${deliveryDate}</p>
    `,
  };

  try {
    await transporter.sendMail(mailOptions);
    res.status(200).send('Email sent successfully!');
  } catch (error) {
    console.error(error);
    res.status(500).send('Failed to send email.');
  }
});

// Start the Server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


---

4. Integrate with the Frontend

Send Request from Checkout Component

Modify your Checkout component to send data to the backend:

import React from 'react';
import { Formik, Field, Form } from 'formik';
import * as Yup from 'yup';
import axios from 'axios';

const Checkout: React.FC = () => {
  const validationSchema = Yup.object({
    cardNumber: Yup.string().required('Required').length(16, 'Must be 16 digits'),
    expiryDate: Yup.string().required('Required'),
    cvv: Yup.string().required('Required').length(3, 'Must be 3 digits'),
    email: Yup.string().email('Invalid email').required('Required'),
  });

  const handleSubmit = async (values: any) => {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const totalAmount = cart.reduce((acc: number, item: any) => acc + item.price * item.quantity, 0);
    const deliveryDate = new Date();
    deliveryDate.setDate(deliveryDate.getDate() + 7); // Estimated delivery date (7 days from now)

    try {
      await axios.post('http://localhost:5000/send-email', {
        email: values.email,
        cart,
        totalAmount,
        deliveryDate: deliveryDate.toDateString(),
      });
      alert('Order placed successfully! Confirmation email sent.');
      localStorage.removeItem('cart');
      window.location.href = '/';
    } catch (error) {
      console.error(error);
      alert('Failed to place the order.');
    }
  };

  return (
    <div>
      <h1>Checkout</h1>
      <Formik
        initialValues={{ cardNumber: '', expiryDate: '', cvv: '', email: '' }}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ errors, touched }) => (
          <Form>
            <div>
              <label>Email:</label>
              <Field name="email" type="email" />
              {errors.email && touched.email && <div>{errors.email}</div>}
            </div>
            <div>
              <label>Card Number:</label>
              <Field name="cardNumber" type="text" />
              {errors.cardNumber && touched.cardNumber && <div>{errors.cardNumber}</div>}
            </div>
            <div>
              <label>Expiry Date:</label>
              <Field name="expiryDate" type="text" />
              {errors.expiryDate && touched.expiryDate && <div>{errors.expiryDate}</div>}
            </div>
            <div>
              <label>CVV:</label>
              <Field name="cvv" type="text" />
              {errors.cvv && touched.cvv && <div>{errors.cvv}</div>}
            </div>
            <button type="submit">Pay Now</button>
          </Form>
        )}
      </Formik>
    </div>
  );
};

export default Checkout;


---

5. Start the Application

Start the backend server:

node server.js

Start the React app:

npm start



---

6. Test the Application

1. Add products to the cart.


2. Proceed to checkout.


3. Enter your email and payment details.


4. Check your email inbox for the confirmation message.




---

This implementation securely sends emails using Nodemailer in the backend and integrates seamlessly with the React frontend. Let me know if you need help with deployment or additional features!

