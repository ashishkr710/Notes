// src/models/address.ts

import { DataTypes, Model, Optional } from 'sequelize';
import sequelize from '../config/database';
import User from './user';

interface AddressAttributes {
  id: number;
  userId: number;
  addressType: 'company' | 'home';
  address: string;
  city: string;
  state: string;
  zip: string;
  createdAt?: Date;
  updatedAt?: Date;
}

interface AddressCreationAttributes extends Optional<AddressAttributes, 'id'> {}

class Address extends Model<AddressAttributes, AddressCreationAttributes> implements AddressAttributes {
  public id!: number;
  public userId!: number;
  public addressType!: 'company' | 'home';
  public address!: string;
  public city!: string;
  public state!: string;
  public zip!: string;

  public readonly createdAt!: Date;
  public readonly updatedAt!: Date;

  // Associations
  public readonly user?: User;
}

Address.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    userId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: 'users', // name of Target model
        key: 'id', // key in Target model
      },
      onDelete: 'CASCADE',
    },
    addressType: {
      type: DataTypes.ENUM('company', 'home'),
      allowNull: false,
    },
    address: {
      type: new DataTypes.STRING(255),
      allowNull: false,
    },
    city: {
      type: new DataTypes.STRING(100),
      allowNull: false,
    },
    state: {
      type: new DataTypes.STRING(100),
      allowNull: false,
    },
    zip: {
      type: new DataTypes.STRING(6),
      allowNull: false,
      validate: {
        len: {
          args: [6, 6],
          msg: 'ZIP code must be exactly 6 digits',
        },
        isNumeric: {
          msg: 'ZIP code must contain only numbers',
        },
      },
    },
  },
  {
    tableName: 'addresses',
    sequelize, // passing the `sequelize` instance is required
  }
);

// Define associations
User.hasMany(Address, { foreignKey: 'userId', as: 'addresses' });
Address.belongsTo(User, { foreignKey: 'userId', as: 'user' });

export default Address;
