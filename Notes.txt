npx create-react-app react-frontend
cd react-frontend
npm start


mkdir node-backend
cd node-backend
npm init -y
npm install express mysql2 cors body-parser bcryptjs jsonwebtoken


CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(255),
  date_of_birth DATE,
  gender ENUM('male', 'female'),
  phone_number VARCHAR(15),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

app.js backend 
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const mysql = require('mysql2');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'your_password',
  database: 'your_database'
});

db.connect(err => {
  if (err) throw err;
  console.log('MySQL Connected...');
});

// API Routes
// Signup API
app.post('/signup', async (req, res) => {
  const { firstName, lastName, email, password, dateOfBirth, gender, phoneNumber } = req.body;

  // Check if email already exists
  db.query('SELECT * FROM users WHERE email = ?', [email], async (err, result) => {
    if (result.length > 0) {
      return res.status(400).json({ msg: 'Email already exists' });
    }
    const hashedPassword = await bcrypt.hash(password, 10);

    const user = { firstName, lastName, email, password: hashedPassword, dateOfBirth, gender, phoneNumber };
    db.query('INSERT INTO users SET ?', user, (err, result) => {
      if (err) throw err;
      res.json({ msg: 'User registered successfully', userId: result.insertId });
    });
  });
});

// Get Profile API
app.get('/profile/:id', (req, res) => {
  const userId = req.params.id;
  db.query('SELECT * FROM users WHERE id = ?', [userId], (err, result) => {
    if (err) throw err;
    res.json(result[0]);
  });
});

// Update Profile API
app.put('/update-profile/:id', (req, res) => {
  const userId = req.params.id;
  const { firstName, lastName, email, dateOfBirth, gender, phoneNumber } = req.body;

  // Check if email already exists for other users
  db.query('SELECT * FROM users WHERE email = ? AND id != ?', [email, userId], (err, result) => {
    if (result.length > 0) {
      return res.status(400).json({ msg: 'Email already in use' });
    }

    const user = { firstName, lastName, email, dateOfBirth, gender, phoneNumber };
    db.query('UPDATE users SET ? WHERE id = ?', [user, userId], (err, result) => {
      if (err) throw err;
      res.json({ msg: 'Profile updated successfully' });
    });
  });
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));



frontend 

npm install axios

import React, { useState } from 'react';
import axios from 'axios';

const Signup = () => {
  const [formData, setFormData] = useState({
    firstName: '', lastName: '', email: '', password: '', confirmPassword: '', 
    dateOfBirth: '', gender: '', phoneNumber: '', 
  });
  const [error, setError] = useState('');

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    try {
      const res = await axios.post('http://localhost:5000/signup', formData);
      console.log(res.data);
      // Redirect to profile
    } catch (err) {
      setError(err.response.data.msg);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" name="firstName" onChange={handleChange} placeholder="First Name" />
      <input type="text" name="lastName" onChange={handleChange} placeholder="Last Name" />
      <input type="email" name="email" onChange={handleChange} placeholder="Email" />
      <input type="password" name="password" onChange={handleChange} placeholder="Password" />
      <input type="password" name="confirmPassword" onChange={handleChange} placeholder="Confirm Password" />
      <input type="date" name="dateOfBirth" onChange={handleChange} />
      <input type="radio" name="gender" value="male" onChange={handleChange} /> Male
      <input type="radio" name="gender" value="female" onChange={handleChange} /> Female
      <input type="text" name="phoneNumber" onChange={handleChange} placeholder="Phone Number" />
      <input type="checkbox" name="terms" required /> I accept the terms and conditions
      <button type="submit">Submit</button>
      {error && <p>{error}</p>}
    </form>
  );
};

export default Signup;



import React, { useEffect, useState } from 'react';
import axios from 'axios';

const Profile = ({ userId }) => {
  const [user, setUser] = useState({});

  useEffect(() => {
    const fetchUser = async () => {
      const res = await axios.get(`http://localhost:5000/profile/${userId}`);
      setUser(res.data);
    };
    fetchUser();
  }, [userId]);

  return (
    <div>
      <h1>{user.firstName} {user.lastName}</h1>
      <p>Email: {user.email}</p>
      <p>Date of Birth: {user.dateOfBirth}</p>
      <p>Gender: {user.gender}</p>
      <p>Phone Number: {user.phoneNumber}</p>
    </div>
  );
};

export default Profile;


import React, { useState, useEffect } from 'react';
import axios from 'axios';

const UpdateProfile = ({ userId }) => {
  const [formData, setFormData] = useState({});

  useEffect(() => {
    const fetchUser = async () => {
      const res = await axios.get(`http://localhost:5000/profile/${userId}`);
      setFormData(res.data);
    };
    fetchUser();
  }, [userId]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.put(`http://localhost:5000/update-profile/${userId}`, formData);
      // Redirect to profile
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" name="firstName" value={formData.firstName} onChange={handleChange} />
      <input type="text" name="lastName" value={formData.lastName} onChange={handleChange} />
      <input type="email" name="email" value={formData.email} onChange={handleChange} />
      <input type="date" name="dateOfBirth" value={formData.dateOfBirth} onChange={handleChange} />
      <input type="radio" name="gender" value="male" checked={formData.gender === 'male'} onChange={handleChange} /> Male
      <input type="radio" name="gender" value="female" checked={formData.gender === 'female'} onChange={handleChange} /> Female
      <input type="text" name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} />
      <button type="submit">Update</button>
    </form>
  );
};

export default UpdateProfile;


