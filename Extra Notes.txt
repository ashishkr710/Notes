import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import API from '../services/api';

const AddUser: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    companyAddress: '',
    companyCity: '',
    companyState: '',
    companyZip: '',
    homeAddress: '',
    homeCity: '',
    homeState: '',
    homeZip: '',
    profilePhoto: null as File | null,
    appointmentLetter: null as File | null,
  });

  const navigate = useNavigate();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, files } = e.target;
    if (files) {
      setFormData({ ...formData, [name]: files[0] });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const data = new FormData();
    Object.keys(formData).forEach(key => {
      if (formData[key as keyof typeof formData]) {
        data.append(key, formData[key as keyof typeof formData] as any);
      }
    });

    try {
      await API.post('/users', data);
      navigate('/view-user');
    } catch (error) {
      alert('Error adding user');
    }
  };

  return (
    <div>
      <h2>Add User</h2>
      <form onSubmit={handleSubmit} encType="multipart/form-data">
        <input type="text" name="firstName" placeholder="First Name" value={formData.firstName} onChange={handleChange} required />
        <input type="text" name="lastName" placeholder="Last Name" value={formData.lastName} onChange={handleChange} required />
        <input type="email" name="email" placeholder="Email" value={formData.email} onChange={handleChange} required />
        <input type="file" name="profilePhoto" accept="image/png, image/jpeg, image/jpg" onChange={handleChange} required />
        <input type="file" name="appointmentLetter" accept="application/pdf" onChange={handleChange} required />
        <input type="text" name="companyAddress" placeholder="Company Address" value={formData.companyAddress} onChange={handleChange} required />
        <input type="text" name="companyCity" placeholder="Company City" value={formData.companyCity} onChange={handleChange} required />
        <input type="text" name="companyState" placeholder="Company State" value={formData.companyState} onChange={handleChange} required />
        <input type="text" name="companyZip" placeholder="Company Zip (6 digits)" value={formData.companyZip} onChange={handleChange} pattern="\d{6}" required />
        <input type="text" name="homeAddress" placeholder="Home Address" value={formData.homeAddress} onChange={handleChange} required />
        <input type="text" name="homeCity" placeholder="Home City" value={formData.homeCity} onChange={handleChange} required />
        <input type="text" name="homeState" placeholder="Home State" value={formData.homeState} onChange={handleChange} required />
        <input type="text" name="homeZip" placeholder="Home Zip (6 digits)" value={formData.homeZip} onChange={handleChange} pattern="\d{6}" required />
        <button type="submit">Submit</button>
        <button type="button" onClick={() => navigate('/view-user')}>Cancel</button>
      </form>
    </div>
  );
};

export default AddUser;

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import API from '../services/api';

interface User {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  profilePic: string;
  appointmentLetter: string;
  address: {
    companyAddress: string;
    companyCity: string;
    companyState: string;
    companyZip: string;
    homeAddress: string;
    homeCity: string;
    homeState: string;
    homeZip: string;
  };
}

interface ViewUserProps {
  handleLogout: () => void;
}

const ViewUser: React.FC<ViewUserProps> = ({ handleLogout }) => {
  const [users, setUsers] = useState<User[]>([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await API.get('/users');
        setUsers(response.data);
      } catch (error) {
        alert('Error fetching users');
      }
    };
    fetchUsers();
  }, []);

  return (
    <div>
      <h2>View Users</h2>
      <button onClick={handleLogout}>Logout</button>
      <table>
        <thead>
          <tr>
            <th>Profile Photo</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Company Address</th>
            <th>Home Address</th>
            <th>Edit</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id}>
              <td><img src={`http://localhost:5000/${user.profilePic}`} alt="Profile" width="50" /></td>
              <td>{user.firstName}</td>
              <td>{user.lastName}</td>
              <td>{user.email}</td>
              <td>
                {user.address.companyAddress}, {user.address.companyCity}, {user.address.companyState}, {user.address.companyZip}
              </td>
              <td>
                {user.address.homeAddress}, {user.address.homeCity}, {user.address.homeState}, {user.address.homeZip}
              </td>
              <td><button onClick={() => navigate(`/edit-user/${user.id}`)}>Edit</button></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ViewUser;


import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import API from '../services/api';

interface User {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  profilePic: string;
  appointmentLetter: string;
  address: {
    companyAddress: string;
    companyCity: string;
    companyState: string;
    companyZip: string;
    homeAddress: string;
    homeCity: string;
    homeState: string;
    homeZip: string;
  };
}

const EditUser: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    companyAddress: '',
    companyCity: '',
    companyState: '',
    companyZip: '',
    homeAddress: '',
    homeCity: '',
    homeState: '',
    homeZip: '',
    profilePhoto: null as File | null,
    appointmentLetter: null as File | null,
  });

  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await API.get(`/users`);
        const user: User | undefined = response.data.find((u: User) => u.id === parseInt(id || '', 10));
        if (user) {
          setFormData({
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            companyAddress: user.address.companyAddress,
            companyCity: user.address.companyCity,
            companyState: user.address.companyState,
            companyZip: user.address.companyZip,
            homeAddress: user.address.homeAddress,
            homeCity: user.address.homeCity,
            homeState: user.address.homeState,
            homeZip: user.address.homeZip,
            profilePhoto: null,
            appointmentLetter: null,
          });
        }
      } catch (error) {
        alert('Error fetching user');
      }
    };
    fetchUser();
  }, [id]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, files } = e.target;
    if (files) {
      setFormData({ ...formData, [name]: files[0] });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const data = new FormData();
    Object.keys(formData).forEach(key => {
      if (formData[key as keyof typeof formData]) {
        data.append(key, formData[key as keyof typeof formData] as any);
      }
    });

    try {
      await API.put(`/users/${id}`, data);
      navigate('/view-user');
    } catch (error) {
      alert('Error updating user');
    }
  };

  return (
    <div>
      <h2>Edit User</h2>
      <form onSubmit={handleSubmit} encType="multipart/form-data">
        <input type="text" name="firstName" placeholder="First Name" value={formData.firstName} onChange={handleChange} required />
        <input type="text" name="lastName" placeholder="Last Name" value={formData.lastName} onChange={handleChange} required />
        <input type="email" name="email" placeholder="Email" value={formData.email} onChange={handleChange} required />
        <input type="file" name="profilePhoto" accept="image/png, image/jpeg, image/jpg" onChange={handleChange} />
        <input type="file" name="appointmentLetter" accept="application/pdf" onChange={handleChange} />
        <input type="text" name="companyAddress" placeholder="Company Address" value={formData.companyAddress} onChange={handleChange} required />
        <input type="text" name="companyCity" placeholder="Company City" value={formData.companyCity} onChange={handleChange} required />
        <input type="text" name="companyState" placeholder="Company State" value={formData.companyState} onChange={handleChange} required />
        <input type="text" name="companyZip" placeholder="Company Zip (6 digits)" value={formData.companyZip} onChange={handleChange} pattern="\d{6}" required />
        <input type="text" name="homeAddress" placeholder="Home Address" value={formData.homeAddress} onChange={handleChange} required />
        <input type="text" name="homeCity" placeholder="Home City" value={formData.homeCity} onChange={handleChange} required />
        <input type="text" name="homeState" placeholder="Home State" value={formData.homeState} onChange={handleChange} required />
        <input type="text" name="homeZip" placeholder="Home Zip (6 digits)" value={formData.homeZip} onChange={handleChange} pattern="\d{6}" required />
        <button type="submit">Update</button>
        <button type="button" onClick={() => navigate('/view-user')}>Cancel</button>
      </form>
    </div>
  );
};

export default EditUser;



import { Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import User from '../models/User';
import Address from '../models/Address';
import config from '../utils/validateEnv';

export const signup = async (req: Request, res: Response) => {
  const { firstName, lastName, email, password } = req.body;

  try {
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: 'Email already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const user = await User.create({
      firstName,
      lastName,
      email,
      password: hashedPassword,
    });

    const token = jwt.sign({ id: user.id }, config.jwtSecret, { expiresIn: '1h' });

    res.status(201).json({ token });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

export const login = async (req: Request, res: Response) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(400).json({ message: 'Invalid Credentials' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid Credentials' });
    }

    const token = jwt.sign({ id: user.id }, config.jwtSecret, { expiresIn: '1h' });

    res.json({ token });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

export const addUser = async (req: Request, res: Response) => {
  const {
    firstName,
    lastName,
    email,
    companyAddress,
    companyCity,
    companyState,
    companyZip,
    homeAddress,
    homeCity,
    homeState,
    homeZip,
  } = req.body;

  try {
    const profilePhoto = req.file && req.file.fieldname === 'profilePhoto' ? req.file.path : null;
    const appointmentLetter = req.file && req.file.fieldname === 'appointmentLetter' ? req.file.path : null;

    const user = await User.create({
      firstName,
      lastName,
      email,
      profilePic: profilePhoto,
      appointmentLetter: appointmentLetter,
    });

    await Address.create({
      userId: user.id,
      companyAddress,
      companyCity,
      companyState,
      companyZip,
      homeAddress,
      homeCity,
      homeState,
      homeZip,
    });

    res.status(201).json({ message: 'User added successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error adding user' });
  }
};

export const viewUser = async (req: Request, res: Response) => {
  try {
    const users = await User.findAll({
      include: [{
        model: Address,
        as: 'address',
      }],
    });
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching users' });
  }
};

export const editUser = async (req: Request, res: Response) => {
  const userId = req.params.id;
  const {
    firstName,
    lastName,
    email,
    companyAddress,
    companyCity,
    companyState,
    companyZip,
    homeAddress,
    homeCity,
    homeState,
    homeZip,
  } = req.body;

  try {
    const user = await User.findByPk(userId);
    const address = await Address.findOne({ where: { userId } });

    if (!user || !address) {
      return res.status(404).json({ message: 'User not found' });
    }

    user.firstName = firstName;
    user.lastName = lastName;
    user.email = email;

    if (req.files) {
      if (req.files['profilePhoto']) {
        user.profilePic = (req.files['profilePhoto'] as Express.Multer.File[])[0].path;
      }
      if (req.files['appointmentLetter']) {
        user.appointmentLetter = (req.files['appointmentLetter'] as Express.Multer.File[])[0].path;
      }
    }

    await user.save();

    address.companyAddress = companyAddress;
    address.companyCity = companyCity;
    address.companyState = companyState;
    address.companyZip = companyZip;
    address.homeAddress = homeAddress;
    address.homeCity = homeCity;
    address.homeState = homeState;
    address.homeZip = homeZip;

    await address.save();

    res.json({ message: 'User updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating user' });
  }
};
