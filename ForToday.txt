To implement the provided assignment, you can follow the outlined steps and code structure. Hereâ€™s a detailed explanation of the process:


---

Solution Overview

1. Static JSON File: Create a static JSON file containing product details.


2. List Products: Use React to list products with pagination.


3. Add to Cart: Allow users to select items and add them to the cart.


4. Cart Management: Enable quantity adjustment and removal of items in the cart.


5. Checkout: Collect credit card details securely.


6. Email Notification: Mock a success email notification using a frontend library or API integration (e.g., Nodemailer).




---

1. Project Setup

Install dependencies:

npx create-react-app ecommerce --template typescript
cd ecommerce
npm install react-router-dom formik yup react-toastify



---

2. Static JSON File

Create a data/products.json file:

[
  {
    "id": 1,
    "name": "Product 1",
    "image": "product1.jpg",
    "price": 100,
    "category": "Electronics",
    "stock": 20,
    "tags": ["Gadget", "Tech"],
    "rating": 4.5,
    "seller": "Seller 1",
    "description": "High-quality electronic gadget."
  },
  {
    "id": 2,
    "name": "Product 2",
    "image": "product2.jpg",
    "price": 150,
    "category": "Fashion",
    "stock": 15,
    "tags": ["Clothing"],
    "rating": 4.0,
    "seller": "Seller 2",
    "description": "Stylish and comfortable clothing."
  }
]


---

3. Components

App Component

Set up routing:

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import ProductsList from './components/ProductsList';
import Cart from './components/Cart';
import Checkout from './components/Checkout';

const App: React.FC = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<ProductsList />} />
        <Route path="/cart" element={<Cart />} />
        <Route path="/checkout" element={<Checkout />} />
      </Routes>
    </Router>
  );
};

export default App;


---

ProductsList Component

Fetch and display products with pagination:

import React, { useState } from 'react';
import products from '../data/products.json';

const ProductsList: React.FC = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 5;

  const startIndex = (currentPage - 1) * productsPerPage;
  const paginatedProducts = products.slice(startIndex, startIndex + productsPerPage);

  const handleAddToCart = (product: any) => {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    localStorage.setItem('cart', JSON.stringify([...cart, { ...product, quantity: 1 }]));
    alert('Added to cart!');
  };

  return (
    <div>
      <h1>Products</h1>
      {paginatedProducts.map((product) => (
        <div key={product.id}>
          <h2>{product.name}</h2>
          <img src={product.image} alt={product.name} style={{ width: '100px' }} />
          <p>{product.description}</p>
          <button onClick={() => handleAddToCart(product)}>Add to Cart</button>
        </div>
      ))}
      <div>
        <button disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)}>Previous</button>
        <button disabled={startIndex + productsPerPage >= products.length} onClick={() => setCurrentPage(currentPage + 1)}>Next</button>
      </div>
    </div>
  );
};

export default ProductsList;


---

Cart Component

Display items in the cart:

import React, { useState } from 'react';

const Cart: React.FC = () => {
  const [cart, setCart] = useState(JSON.parse(localStorage.getItem('cart') || '[]'));

  const handleQuantityChange = (id: number, quantity: number) => {
    const updatedCart = cart.map((item: any) =>
      item.id === id ? { ...item, quantity } : item
    );
    setCart(updatedCart);
    localStorage.setItem('cart', JSON.stringify(updatedCart));
  };

  const handleRemove = (id: number) => {
    const updatedCart = cart.filter((item: any) => item.id !== id);
    setCart(updatedCart);
    localStorage.setItem('cart', JSON.stringify(updatedCart));
  };

  const totalCost = cart.reduce((acc: number, item: any) => acc + item.price * item.quantity, 0);

  return (
    <div>
      <h1>Cart</h1>
      {cart.map((item: any) => (
        <div key={item.id}>
          <h2>{item.name}</h2>
          <p>Quantity: {item.quantity}</p>
          <input
            type="number"
            value={item.quantity}
            onChange={(e) => handleQuantityChange(item.id, parseInt(e.target.value))}
          />
          <button onClick={() => handleRemove(item.id)}>Remove</button>
        </div>
      ))}
      <h3>Total Cost: ${totalCost}</h3>
      <a href="/checkout">Proceed to Checkout</a>
    </div>
  );
};

export default Cart;


---

Checkout Component

Handle payment:

import React from 'react';
import { Formik, Field, Form } from 'formik';
import * as Yup from 'yup';

const Checkout: React.FC = () => {
  const validationSchema = Yup.object({
    cardNumber: Yup.string().required('Required').length(16, 'Must be 16 digits'),
    expiryDate: Yup.string().required('Required'),
    cvv: Yup.string().required('Required').length(3, 'Must be 3 digits'),
  });

  const handleSubmit = (values: any) => {
    console.log('Payment Details:', values);
    alert('Order placed successfully!');
    localStorage.removeItem('cart');
    window.location.href = '/';
  };

  return (
    <div>
      <h1>Checkout</h1>
      <Formik
        initialValues={{ cardNumber: '', expiryDate: '', cvv: '' }}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ errors, touched }) => (
          <Form>
            <div>
              <label>Card Number:</label>
              <Field name="cardNumber" type="text" />
              {errors.cardNumber && touched.cardNumber && <div>{errors.cardNumber}</div>}
            </div>
            <div>
              <label>Expiry Date:</label>
              <Field name="expiryDate" type="text" />
              {errors.expiryDate && touched.expiryDate && <div>{errors.expiryDate}</div>}
            </div>
            <div>
              <label>CVV:</label>
              <Field name="cvv" type="text" />
              {errors.cvv && touched.cvv && <div>{errors.cvv}</div>}
            </div>
            <button type="submit">Pay Now</button>
          </Form>
        )}
      </Formik>
    </div>
  );
};

export default Checkout;


---

Email Notification

You can mock email sending by showing a success notification using React Toastify.


---

Let me know if you need further assistance!

